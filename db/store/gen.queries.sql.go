// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: DBStore.sql

package store

import (
	"context"
	"time"
)

const doesCategoryExist = `-- name: DoesCategoryExist :one
SELECT EXISTS(
    SELECT 1 FROM categories
    WHERE
        author_id = $1
            AND
        id = $2
)
`

func (q *DBStore) DoesCategoryExist(ctx context.Context, authorID string, iD string) (bool, error) {
	row := q.db.QueryRow(ctx, doesCategoryExist, authorID, iD)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const doesTransactionExist = `-- name: DoesTransactionExist :one
SELECT EXISTS(
    SELECT 1 FROM transactions
    WHERE
        author_id = $1
            AND
        authed_at = $2 AND settled_at = $3
            AND
        description = $4 AND amount = $5
)
`

func (q *DBStore) DoesTransactionExist(ctx context.Context, authorID string, authedAt time.Time, settledAt time.Time, description string, amount float64) (bool, error) {
	row := q.db.QueryRow(ctx, doesTransactionExist,
		authorID,
		authedAt,
		settledAt,
		description,
		amount,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getTransCount = `-- name: GetTransCount :one
SELECT COUNT(*) FROM transactions WHERE author_id = $1
`

func (q *DBStore) GetTransCount(ctx context.Context, authorID string) (int64, error) {
	row := q.db.QueryRow(ctx, getTransCount, authorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserUpdatedAt = `-- name: GetUserUpdatedAt :one
SELECT updated_at FROM users WHERE id = $1
`

func (q *DBStore) GetUserUpdatedAt(ctx context.Context, id string) (time.Time, error) {
	row := q.db.QueryRow(ctx, getUserUpdatedAt, id)
	var updated_at time.Time
	err := row.Scan(&updated_at)
	return updated_at, err
}
